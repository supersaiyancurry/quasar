{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\jyesupriya\\\\Desktop\\\\quasar-frontend-3\\\\quasar-frontend\\\\src\\\\components\\\\form field\\\\FormField.js\";\nimport React from 'react';\nimport styles from '../customer/Customer.module.css';\n/**\r\n * styled form controlled input wrapper. Can display errors\r\n * @param {string} type - the input type to use\r\n * @param {string} name - the text to show in the label\r\n * @param {function} changeCallback - the function to call when the input changes\r\n * @param {string} value - the current value of the input element\r\n * @param {boolean} error - true if validation failed for this field\r\n * @param {string} errorMessage - the message to display when there is an error\r\n */\n\nconst FormField = ({\n  type,\n  name,\n  changeCallback,\n  value,\n  error,\n  errorMessage,\n  required\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"form-group row\",\n  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n    className: `col-sm-3 col-form-label ${styles.label}`,\n    htmlFor: name,\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-sm-9\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      id: name,\n      className: styles.dropdown,\n      onChange: event => changeCallback(event.target.value),\n      value: value,\n      required: required,\n      placeholder: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n\n_c = FormField;\nexport default FormField;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormField\");","map":{"version":3,"sources":["C:/Users/jyesupriya/Desktop/quasar-frontend-3/quasar-frontend/src/components/form field/FormField.js"],"names":["React","styles","FormField","type","name","changeCallback","value","error","errorMessage","required","label","dropdown","event","target"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,IADiB;AACXC,EAAAA,IADW;AACLC,EAAAA,cADK;AACWC,EAAAA,KADX;AACkBC,EAAAA,KADlB;AACyBC,EAAAA,YADzB;AACuCC,EAAAA;AADvC,CAAD,kBAGhB;AAAK,EAAA,SAAS,EAAC,gBAAf;AAAA,0BACE;AAAO,IAAA,SAAS,EAAG,2BAA0BR,MAAM,CAACS,KAAM,EAA1D;AAA6D,IAAA,OAAO,EAAEN,IAAtE;AAAA,cAA6EA;AAA7E;AAAA;AAAA;AAAA;AAAA,UADF,eAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AACE,MAAA,IAAI,EAAED,IADR;AAEE,MAAA,EAAE,EAAEC,IAFN;AAGE,MAAA,SAAS,EAAEH,MAAM,CAACU,QAHpB;AAIE,MAAA,QAAQ,EAAGC,KAAD,IAAWP,cAAc,CAACO,KAAK,CAACC,MAAN,CAAaP,KAAd,CAJrC;AAKE,MAAA,KAAK,EAAEA,KALT;AAME,MAAA,QAAQ,EAAEG,QANZ;AAOE,MAAA,WAAW,EAAEL;AAPf;AAAA;AAAA;AAAA;AAAA,YADF,EAUGG,KAAK,iBACH;AAAG,MAAA,SAAS,EAAEN,MAAM,CAACM,KAArB;AAAA,gBAA6BC;AAA7B;AAAA;AAAA;AAAA;AAAA,YAXL;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF;;KAAMN,S;AAqBN,eAAeA,SAAf","sourcesContent":["import React from 'react';\r\nimport styles from '../customer/Customer.module.css';\r\n\r\n/**\r\n * styled form controlled input wrapper. Can display errors\r\n * @param {string} type - the input type to use\r\n * @param {string} name - the text to show in the label\r\n * @param {function} changeCallback - the function to call when the input changes\r\n * @param {string} value - the current value of the input element\r\n * @param {boolean} error - true if validation failed for this field\r\n * @param {string} errorMessage - the message to display when there is an error\r\n */\r\nconst FormField = ({\r\n  type, name, changeCallback, value, error, errorMessage, required\r\n}) => (\r\n  <div className=\"form-group row\">\r\n    <label className={`col-sm-3 col-form-label ${styles.label}`} htmlFor={name}>{name}</label>\r\n    <div className=\"col-sm-9\">\r\n      <input\r\n        type={type}\r\n        id={name}\r\n        className={styles.dropdown}\r\n        onChange={(event) => changeCallback(event.target.value)}\r\n        value={value}\r\n        required={required}\r\n        placeholder={name}\r\n      />\r\n      {error\r\n      && <p className={styles.error}>{errorMessage}</p>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FormField;\r\n"]},"metadata":{},"sourceType":"module"}